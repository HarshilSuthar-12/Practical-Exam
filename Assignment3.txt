(0) Create an empty collection namely "student"

db.student.insert({
	regNo: "3014",
	name: "Test Student",
	courseName: "MCA",
 	duration: 2,
	gradPer: 70,
	address: {
		city: "Changa",
		state: "GJ",
		country: "India"
	}
})
db.student.insert({
	regNo: "3015",
	name: "jhanvi",
	courseName: "BCA",
	duration: 3,
	HSCPer: 80,
	address: {
		city: "surat",
		state: "Guj",
		country: "India"
	}
})
Insert at least 5 documents.

(1) Change the name to "Ami" for Test document
	db.student.update({"name":"Test Student"},{$set : {"name":"Ami"}})
	update Statement!!

(2) Find student details whose name starts with "A"
	db.student.find({"name":/^A/})

(3) Find student details whose name ends with "l"
	db.student.find({"name":/i$/})
	
(4) Find student details registered for 3 year course
	db.student.find({"duration":3})

(5) Find student registration number, name for all the students
	db.student.find({},{"regNo":1, _id:0, name:1})

(6) Find student registration number, name, course name and course duration in ascending order by their course duration.
	db.student.find({},{"regNo":1,"name":1,"courceName":1,"duration":1,_id:0}).sort({duration:1})

(7) Find total number of students.
	db.student.find().count()
	
(8) Find total nunmber of student studying in MCA course
	db.student.find({"courseName":"MCA"}).count()

(9) Find average percentage for MCA and BCA students
	 db.student.aggregate([
	{$group: {"_id":"$courseName",
		Average: {$avg: "$last"}}}	])
	The ERoor is Ocuuring Because we have not same column in Every Document, When we are doing Aggregate we should have common column in Every Document.
so i have to add common column.
db.student.updateMany({},{$set: {"last":80}})
See we got output.

(10) Find average percentage for MCA students
db.student.aggregate([
	{$match: {courseName: "MCA"}},
	{$group: {"_id":"$courseName",
		Average: {$avg: "$last"}}}	])
We have to use match Function for putting Condition before forming Query.
We forgot to Put '$'.

(11) Find number of students studying in MCA with more than 60 percentage in graduation
	db.student.find({"$and":[{"courseName":"MCA"},{"last":{$gt: 60}}]}).count()
	In This Query and operator is used where we can check more than one condition.

(12) Find average percentage for each course. Eliminate the courses if average percentage is less than 50.
	db.student.aggregate([
	{$match: {"last":{$gt:50}}},
	{$group: {"_id":"$courseName",
		Average: {"$avg":"$last"}}}
])
No Group Will Be Eliminated because no group has percentage less than 60.
	
(13) Find total number of students whose name starts with "A"
	db.student.find({"name":/^A/}).count()

(14) Find total number of students who are not from state "GJ"
	db.student.find({"address.state":{"$ne":"GJ"}}).count()

db.student.aggregate([
{
	$group: {_id:'$courseName',
	AverageMCA: {$avg: '$gradPer'},
	AverageBCA: {$avg: '$HSCPer'}
		} 
},
	{"$match": 
		{"$or": [
				{AverageBCA:{$gt:50}},
				{AverageMCA:{$gt:50}}
			] 
		} 
	}
])




